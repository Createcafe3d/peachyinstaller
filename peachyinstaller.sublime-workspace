{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ico",
				"icon_file"
			],
			[
				"ins",
				"installed_path"
			],
			[
				"cre",
				"create_shortcut"
			],
			[
				"Sh",
				"ShortCutter"
			],
			[
				"ex",
				"expected_icon"
			],
			[
				"pa",
				"path"
			],
			[
				"ected",
				"expected_target_exe"
			],
			[
				"exp",
				"expected_destination_folder"
			],
			[
				"assert",
				"assert_called_with"
			],
			[
				"mock_s",
				"mock_create_shortcut"
			],
			[
				"ass",
				"assert_called_with	function"
			],
			[
				"base",
				"base_install_path	param"
			],
			[
				"des",
				"dest_folder	statement"
			],
			[
				"ap",
				"_application"
			],
			[
				"b",
				"base_install_path"
			],
			[
				"retu",
				"return_value"
			],
			[
				"int",
				"internal_path	statement"
			],
			[
				"ret",
				"return_value"
			],
			[
				"mock",
				"mock_listdir	param"
			],
			[
				"con",
				"config_url	param"
			],
			[
				"comp",
				"complete_callback"
			],
			[
				"file",
				"file_path	param"
			],
			[
				"mo",
				"mock_zip_handle	statement"
			],
			[
				"zip",
				"zip_file_handle	withstmt"
			],
			[
				"mock_zip",
				"mock_zip_handle	statement"
			],
			[
				"e",
				"expected_source_path"
			],
			[
				"ca",
				"call_args_list"
			],
			[
				"call",
				"call_args_list	statement"
			],
			[
				"re",
				"return_value"
			],
			[
				"z",
				"zip_file	withstmt"
			],
			[
				"ch",
				"chunk	statement"
			],
			[
				"data",
				"dataString	statement"
			],
			[
				"a",
				"a_file"
			],
			[
				"Ins",
				"InstallerException	class"
			],
			[
				"Magic",
				"MagicMock	class"
			],
			[
				"resp",
				"response"
			],
			[
				"response",
				"test_run_should_report_failure_if_response_is_not_200"
			],
			[
				"sleep",
				"sleep_time"
			],
			[
				"app",
				"application"
			],
			[
				"get",
				"getenv	function"
			],
			[
				"get_S",
				"get_sample_web_config	function"
			],
			[
				"App",
				"ApplicationInstallTest"
			],
			[
				"mocik",
				"mock_open_file"
			],
			[
				"get_sample_",
				"get_sample_file_config"
			],
			[
				"test",
				"test_installer_api	statement"
			],
			[
				"Test",
				"TestHelpers"
			],
			[
				"Tes",
				"TestHelpers"
			],
			[
				"fil",
				"file_app	statement"
			],
			[
				"fi",
				"file_path	statement"
			],
			[
				"_get",
				"_get_file_config_path	function"
			],
			[
				"tes",
				"test_installer_api	statement"
			],
			[
				"Conf",
				"ConfigException	class"
			],
			[
				"err",
				"error_code	statement"
			],
			[
				"error",
				"error_code	param"
			],
			[
				"inst",
				"installed_config	statement"
			],
			[
				"p",
				"property	New Property"
			],
			[
				"assertE",
				"assertEquals	statement"
			],
			[
				"s",
				"sample	statement"
			],
			[
				"sam",
				"sample_installed_config	statement"
			],
			[
				"sample",
				"sample_installed_config"
			],
			[
				"init",
				"init_result	statement"
			],
			[
				"ini",
				"init_result	statement"
			],
			[
				"assertT",
				"assertTrue	function"
			],
			[
				"Not",
				"NotImplementedError	class"
			],
			[
				"In",
				"InstallerAPI"
			],
			[
				"pr",
				"product"
			]
		]
	},
	"buffers":
	[
		{
			"file": "windows/src/install.py",
			"settings":
			{
				"buffer_size": 7747,
				"line_ending": "Windows"
			}
		},
		{
			"file": "windows/src/installer_api.py",
			"settings":
			{
				"buffer_size": 3957,
				"line_ending": "Windows"
			}
		},
		{
			"file": "windows/src/application.py",
			"settings":
			{
				"buffer_size": 1706,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import threading\nimport urllib2\nimport os\nfrom os import listdir\nfrom os.path import isdir\nimport zipfile\nfrom shutil import move\nimport logging\nfrom win32com.client import Dispatch\n\nlogger = logging.getLogger('peachy')\n\nclass ShortCutter(object):\n    @staticmethod\n    def create_shortcut(destination_file, target_exe, working_dir, icon_file, ):\n        shell = Dispatch('WScript.Shell')\n        shortcut = shell.CreateShortCut(destination_file)\n        shortcut.Targetpath = target_exe\n        shortcut.WorkingDirectory = working_dir\n        shortcut.IconLocation = icon_file\n        shortcut.save()\n\n\nclass InstallerException(Exception):\n    def __init__(self, error_code, message):\n        super(InstallerException, self).__init__(message)\n        logger.error(\"{} - {}\".format(error_code, message))\n        self.error_code = error_code\n\n\nclass InstallApplication(threading.Thread):\n    def __init__(self, application, base_install_path, status_callback=None, complete_callback=None):\n        threading.Thread.__init__(self)\n        self._application = application\n        self._base_path = base_install_path\n        self._temp_file_location = os.getenv(\"TEMP\")\n        self._status_callback = status_callback\n        self._complete_callback = complete_callback\n        self.CHUNK_SIZE = 16 * 1024\n        self._report_status(\"Initializing\")\n\n    def _report_status(self, message):\n        logger.info(message)\n        if self._status_callback:\n            self._status_callback(message)\n\n    def _report_complete(self, success, message):\n        logger.info(message)\n        if self._complete_callback:\n            self._complete_callback(success, message)\n\n    def _fetch_zip(self, url):\n        logger.info(\"Downloading from: {}\".format(url))\n        response = urllib2.urlopen(url)\n        if response.getcode() != 200:\n            raise InstallerException(10501, \"Got error {} accessing {}\".format(response.getcode(), url))\n        file_path = os.path.join(self._temp_file_location, url.split('/')[-1])\n        logger.info(\"Saving to: {}\".format(file_path))\n        try:\n            with open(file_path, 'wb') as zip_file:\n                total_read = 0\n                while True:\n                    chunk = response.read(self.CHUNK_SIZE)\n                    if not chunk:\n                        break\n                    total_read += len(chunk)\n                    logger.debug(\"Reading chunk: {}\".format(total_read))\n                    zip_file.write(chunk)\n            return file_path\n        except IOError:\n            raise InstallerException(10502, \"Error creating file: {}\".format(file_path))\n\n    def _unzip_files(self, file_path):\n        destination_folder = os.path.join(self._temp_file_location, self._application.name)\n        logger.info(\"Unzipping {} into {}\".format(file_path, destination_folder))\n        try:\n            with zipfile.ZipFile(file_path, \"r\") as zip_file_handle:\n                zip_file_handle.extractall(destination_folder)\n                return destination_folder\n        except Exception as ex:\n            logger.error(ex.message)\n            raise InstallerException(10503, \"Error unzipping file\")\n\n    def _inner_path(self, unzip_path):\n        paths = [os.path.join(unzip_path, path) for path in listdir(unzip_path) if isdir(os.path.join(unzip_path, path))]\n        if len(paths) > 1:\n            logger.error(\"Zip file expected one but contains the following folders: {}\".format(','.join(paths)))\n            raise InstallerException(10504, \"Zip file contains unexpected layout\")\n        inner_path =  paths[0]\n        logger.info(\"Found folder in zip: {}\".format(inner_path))\n        return inner_path\n\n    def _move_files(self, temp_destination):\n        try:\n            source_folder = self._inner_path(temp_destination)\n            dest_folder = os.path.join(self._base_path, 'Peachy', self._application.relitive_install_path)\n            move(source_folder, dest_folder)\n            return dest_folder\n        except InstallerException:\n            raise\n        except Exception as ex:\n            logger.error(ex)\n            raise InstallerException(10505, \"Cannot move folders into install folder\")\n\n    def _create_shortcut(self, installed_path):\n        try:\n            link = os.path.join(os.getenv('USERPROFILE'), 'Desktop', self._application.name + '.lnk')\n            target_file = os.path.join(installed_path, self._application.executable_path)\n            working_dir = installed_path\n            icon_file = os.path.join(installed_path, self._application.icon)\n\n            ShortCutter.create_shortcut(link, target_file, working_dir, icon_file)\n\n    def run(self):\n        try:\n            self._report_status(\"Downloading\")\n            file_path = self._fetch_zip(self._application.download_location)\n            self._report_status(\"Unpacking\")\n            # temp_destination = os.path.join(self._temp_file_location, self._application.name)\n            temp_destination = self._unzip_files(file_path)\n            self._report_status(\"Installing\")\n            installed_path = self._move_files(temp_destination)\n            self._report_status(\"Creating Shortcuts\")\n            self._create_shortcut(installed_path)\n            self._report_status(\"Finalizing\")\n            self._report_complete(True, \"Success\")\n        except InstallerException as ex:\n            self._report_complete(False, ex.message)\n        except Exception as ex:\n            logger.error(ex)\n            raise\n\n",
			"file": "windows/src/application_install.py",
			"file_size": 5565,
			"file_write_time": 130966691189970373,
			"settings":
			{
				"buffer_size": 5467,
				"line_ending": "Windows"
			}
		},
		{
			"file": "windows/test/test_application_installer.py",
			"settings":
			{
				"buffer_size": 13732,
				"line_ending": "Windows"
			}
		},
		{
			"file": "windows/test/test_application.py",
			"settings":
			{
				"buffer_size": 3345,
				"line_ending": "Windows"
			}
		},
		{
			"file": "config.json",
			"settings":
			{
				"buffer_size": 317,
				"line_ending": "Windows"
			}
		},
		{
			"file": "windows/test/test_installer_api.py",
			"settings":
			{
				"buffer_size": 6394,
				"line_ending": "Windows"
			}
		},
		{
			"file": "windows/test/helpers.py",
			"settings":
			{
				"buffer_size": 1233,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 81.0,
		"last_filter": "json",
		"selected_items":
		[
			[
				"json",
				"JSON Reindent: reindent file or selection"
			],
			[
				"jsoin",
				"JSON Reindent: reindent file or selection"
			],
			[
				"inst",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/jtownley/git/peachyinstaller",
		"/C/Users/jtownley/git/peachyinstaller/windows",
		"/C/Users/jtownley/git/peachyinstaller/windows/test"
	],
	"file_history":
	[
		"/C/Users/jtownley/git/peachyinstaller/windows/test/test_installer_api.py",
		"/C/Users/jtownley/git/peachyinstaller/windows/test/test_application.py",
		"/C/Users/jtownley/git/peachyinstaller/windows/test/helpers.py",
		"/C/Users/jtownley/git/peachyinstaller/config.json",
		"/C/Users/jtownley/git/peachyinstaller/windows/test/test_data/installed.json",
		"/C/Users/jtownley/git/peachyinstaller/windows/test.bat",
		"/C/Users/jtownley/git/peachyinstaller/windows/test/run_all_tests.py",
		"/C/Users/jtownley/git/peachyinstaller/windows/src/install.spec",
		"/C/Users/jtownley/git/peachyinstaller/windows/build.bat",
		"/C/Users/jtownley/git/peachyinstaller/peachyinstaller.sublime-project",
		"/C/Users/jtownley/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/jtownley/AppData/Roaming/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/C/Users/jtownley/AppData/Roaming/Sublime Text 3/Packages/GitGutter/GitGutter.sublime-settings",
		"/C/Users/jtownley/AppData/Roaming/Sublime Text 3/Packages/User/GitGutter.sublime-settings",
		"/C/Users/jtownley/AppData/Roaming/Sublime Text 3/Packages/JSON Reindent/JSONReindent.sublime-settings",
		"/C/Users/jtownley/AppData/Roaming/Sublime Text 3/Installed Packages/JSON Reindent.sublime-package",
		"/C/Users/jtownley/git/peachyinstaller/windows/test/installer_api.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"install_path",
			"app",
			", mock_isdir):",
			"getenv",
			", mock_move)",
			", mock_ZipFile",
			"mock_zipfile",
			"destination",
			"(self, mock_urlib2)",
			"_complete_callback",
			"_status_callback",
			"a_file",
			"make_mock_response",
			"['id']",
			"InstallerAPIStub",
			"print",
			"webitem",
			"get_sample_web_config",
			"self, mock_urllib2",
			"return (False, ",
			"self.",
			" = ",
			"_check_config",
			"webconfig",
			"file_config",
			"['en-us']",
			")\n",
			"'],",
			"exit()",
			"Exit",
			"exit",
			"NotImplementedException",
			"'"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "windows/src/install.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7747,
						"regions":
						{
						},
						"selection":
						[
							[
								7347,
								7347
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "windows/src/installer_api.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3957,
						"regions":
						{
						},
						"selection":
						[
							[
								2417,
								2417
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1080.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "windows/src/application.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1706,
						"regions":
						{
						},
						"selection":
						[
							[
								1706,
								1706
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "windows/src/application_install.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5467,
						"regions":
						{
						},
						"selection":
						[
							[
								4623,
								4623
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1395.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "windows/test/test_application_installer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13732,
						"regions":
						{
						},
						"selection":
						[
							[
								13504,
								13504
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3461.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "windows/test/test_application.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3345,
						"regions":
						{
						},
						"selection":
						[
							[
								1415,
								1415
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 315.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "config.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 317,
						"regions":
						{
						},
						"selection":
						[
							[
								171,
								183
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "windows/test/test_installer_api.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6394,
						"regions":
						{
						},
						"selection":
						[
							[
								3766,
								3766
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1035.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "windows/test/helpers.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1233,
						"regions":
						{
						},
						"selection":
						[
							[
								988,
								988
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 22.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 333.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "peachyinstaller.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"test_a",
				"windows\\test\\test_application.py"
			],
			[
				"json",
				"config.json"
			],
			[
				"test",
				"windows\\test\\test_installer_api.py"
			],
			[
				"help",
				"windows\\test\\helpers.py"
			],
			[
				"",
				"config.json"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 270.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
